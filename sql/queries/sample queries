-- 1. Find all books by a specific author
SELECT b.Title, b.ISBN, b.PublicationDate
FROM Books b
JOIN BookAuthors ba ON b.BookID = ba.BookID
JOIN Authors a ON ba.AuthorID = a.AuthorID
WHERE a.LastName = 'Rowling';

-- 2. Find all overdue books with member contact information
SELECT b.Title, 
       m.FirstName + ' ' + m.LastName AS MemberName, 
       m.Email, 
       l.DueDate,
       DATEDIFF(DAY, l.DueDate, GETDATE()) AS DaysOverdue
FROM Loans l
JOIN Books b ON l.BookID = b.BookID
JOIN Members m ON l.MemberID = m.MemberID
WHERE l.ReturnDate IS NULL AND l.DueDate < GETDATE();

-- 3. Find the most popular books (most borrowed)
SELECT b.Title, COUNT(l.LoanID) AS TimesBorrowed
FROM Books b
JOIN Loans l ON b.BookID = l.BookID
GROUP BY b.Title
ORDER BY TimesBorrowed DESC;

-- 4. Find all books in a specific category
SELECT b.Title, b.ISBN, p.Name AS Publisher
FROM Books b
JOIN BookCategories bc ON b.BookID = bc.BookID
JOIN Categories c ON bc.CategoryID = c.CategoryID
JOIN Publishers p ON b.PublisherID = p.PublisherID
WHERE c.Name = 'Mystery';

-- 5. Find members with outstanding fines
SELECT m.FirstName + ' ' + m.LastName AS MemberName, 
       m.Email, 
       SUM(f.Amount) AS TotalFine
FROM Members m
JOIN Fines f ON m.MemberID = f.MemberID
WHERE f.Status = 'Pending'
GROUP BY m.MemberID, m.FirstName, m.LastName, m.Email
HAVING SUM(f.Amount) > 0
ORDER BY TotalFine DESC;

-- 6. Search for books by title keyword
SELECT 
    b.Title, 
    b.ISBN, 
    STRING_AGG(a.FirstName + ' ' + a.LastName, ', ') AS Authors,
    STRING_AGG(c.Name, ', ') AS Categories
FROM Books b
JOIN BookAuthors ba ON b.BookID = ba.BookID
JOIN Authors a ON ba.AuthorID = a.AuthorID
JOIN BookCategories bc ON b.BookID = bc.BookID
JOIN Categories c ON bc.CategoryID = c.CategoryID
WHERE b.Title LIKE '%Potter%'
GROUP BY b.BookID, b.Title, b.ISBN;

-- 7. Get book borrowing history for a specific member
SELECT b.Title, l.CheckoutDate, l.DueDate, l.ReturnDate, l.Status
FROM Loans l
JOIN Books b ON l.BookID = b.BookID
WHERE l.MemberID = 1
ORDER BY l.CheckoutDate DESC;

-- 8. Find available copies of a specific book
SELECT b.Title, COUNT(bc.CopyID) AS AvailableCopies
FROM Books b
JOIN BookCopies bc ON b.BookID = bc.BookID
WHERE b.Title = 'Harry Potter and the Philosopher''s Stone' AND bc.Status = 'Available'
GROUP BY b.Title;

-- 9. Calculate library statistics
SELECT 
    (SELECT COUNT(*) FROM Books) AS TotalBooks,
    (SELECT COUNT(*) FROM BookCopies) AS TotalCopies,
    (SELECT COUNT(*) FROM BookCopies WHERE Status = 'Available') AS AvailableCopies,
    (SELECT COUNT(*) FROM Members WHERE MembershipStatus = 'Active') AS ActiveMembers,
    (SELECT COUNT(*) FROM Loans WHERE ReturnDate IS NULL) AS CurrentLoans,
    (SELECT COUNT(*) FROM Reservations WHERE Status = 'Pending') AS PendingReservations;

-- 10. Find books that need to be returned today
SELECT b.Title, m.FirstName + ' ' + m.LastName AS MemberName, m.Email, m.Phone
FROM Loans l
JOIN Books b ON l.BookID = b.BookID
JOIN Members m ON l.MemberID = m.MemberID
WHERE l.ReturnDate IS NULL AND CONVERT(DATE, l.DueDate) = CONVERT(DATE, GETDATE());
